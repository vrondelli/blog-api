name: Health Check & Monitoring

on:
  schedule:
    # Run health checks every 15 minutes
    - cron: '*/15 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
          - both

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest

    steps:
      - name: Check Production Health
        if: github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both' || github.event_name == 'schedule'
        run: |
          echo "üîç Checking production health..."

          # Health endpoint check
          if curl -f -s -m 30 "https://${{ vars.PRODUCTION_DOMAIN }}/health" > /dev/null; then
            echo "‚úÖ Production health check passed"
          else
            echo "‚ùå Production health check failed"
            exit 1
          fi

          # API endpoint check
          if curl -f -s -m 30 "https://${{ vars.PRODUCTION_DOMAIN }}/api" > /dev/null; then
            echo "‚úÖ Production API endpoint is responding"
          else
            echo "‚ö†Ô∏è Production API endpoint check failed"
          fi

      - name: Check Staging Health
        if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'both'
        run: |
          echo "üîç Checking staging health..."

          # Health endpoint check
          if curl -f -s -m 30 "https://${{ vars.STAGING_DOMAIN }}/health" > /dev/null; then
            echo "‚úÖ Staging health check passed"
          else
            echo "‚ùå Staging health check failed"
            exit 1
          fi

          # API endpoint check
          if curl -f -s -m 30 "https://${{ vars.STAGING_DOMAIN }}/api" > /dev/null; then
            echo "‚úÖ Staging API endpoint is responding"
          else
            echo "‚ö†Ô∏è Staging API endpoint check failed"
          fi

      - name: Detailed Health Report
        if: failure()
        run: |
          echo "üìä Generating detailed health report..."

          if [ "${{ github.event.inputs.environment }}" == "production" ] || [ "${{ github.event_name }}" == "schedule" ]; then
            echo "üîç Production detailed check:"
            curl -v "https://${{ vars.PRODUCTION_DOMAIN }}/health" || true
            echo ""
          fi

          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "üîç Staging detailed check:"
            curl -v "https://${{ vars.STAGING_DOMAIN }}/health" || true
            echo ""
          fi

      - name: Notify on failure
        if: failure() && github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Health Check Failed - ${new Date().toISOString()}`,
              body: `
              ## Health Check Failure Report
              
              **Timestamp:** ${new Date().toISOString()}
              **Workflow:** ${context.workflow}
              **Run ID:** ${context.runId}
              
              ### Details
              The automated health check has detected issues with the application.
              
              ### Recommended Actions
              1. Check server logs
              2. Verify service status
              3. Check resource usage (CPU, memory, disk)
              4. Review recent deployments
              
              ### Quick Commands
              \`\`\`bash
              # Check application logs
              ssh user@server 'docker logs nestjs-app'
              
              # Check service status
              ssh user@server 'docker-compose -f /opt/nestjs-blog-api/docker-compose.prod.yml ps'
              
              # Restart application if needed
              ssh user@server 'cd /opt/nestjs-blog-api && docker-compose -f docker-compose.prod.yml restart'
              \`\`\`
              
              This issue was automatically created by the health check workflow.
              `,
              labels: ['bug', 'health-check', 'monitoring']
            });

            console.log('Created issue:', issue.data.html_url);

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Performance Test
        run: |
          echo "‚ö° Running performance tests..."

          if [ "${{ github.event.inputs.environment }}" == "production" ] || [ "${{ github.event.inputs.environment }}" == "both" ]; then
            echo "üîç Testing production performance..."
            
            # Simple load test with curl
            echo "Testing response time..."
            RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null "https://${{ vars.PRODUCTION_DOMAIN }}/health")
            echo "Response time: ${RESPONSE_TIME}s"
            
            # Check if response time is acceptable (< 2 seconds)
            if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
              echo "‚úÖ Production response time is acceptable"
            else
              echo "‚ö†Ô∏è Production response time is slow: ${RESPONSE_TIME}s"
            fi
          fi

          if [ "${{ github.event.inputs.environment }}" == "staging" ] || [ "${{ github.event.inputs.environment }}" == "both" ]; then
            echo "üîç Testing staging performance..."
            
            RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null "https://${{ vars.STAGING_DOMAIN }}/health")
            echo "Response time: ${RESPONSE_TIME}s"
            
            if (( $(echo "$RESPONSE_TIME < 2.0" | bc -l) )); then
              echo "‚úÖ Staging response time is acceptable"
            else
              echo "‚ö†Ô∏è Staging response time is slow: ${RESPONSE_TIME}s"
            fi
          fi
