name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  # Run tests and code quality checks
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile || pnpm install --no-frozen-lockfile

      - name: Generate Prisma client
        run: pnpm run db:generate

      - name: Create test environment file
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: pnpm run db:migrate
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run unit tests
        run: pnpm run test

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Run linting
        run: pnpm run lint

      - name: Check code formatting
        run: pnpm run format

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build and validate Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/nestjs-blog-api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to production environment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    # environment: production  # Uncomment when GitHub environment is configured

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python for Ansible
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Create Ansible inventory
        run: |
          mkdir -p /tmp/ansible
          cat > /tmp/ansible/hosts.yml << EOF
          ---
          all:
            hosts:
              production-server:
                ansible_host: ${{ secrets.PRODUCTION_HOST }}
                ansible_user: ${{ secrets.PRODUCTION_USER }}
                ansible_ssh_private_key_file: ~/.ssh/id_rsa
                domain_name: ${{ secrets.PRODUCTION_DOMAIN }}
                ssl_email: ${{ secrets.SSL_EMAIL }}
                git_repo_url: ${{ github.server_url }}/${{ github.repository }}
                git_branch: main
                
            vars:
              app_name: nestjs-blog-api
              app_port: 3000
              app_user: deploy
              app_dir: /opt/nestjs-blog-api
              postgres_db: blog_db
              postgres_user: blog_user
              postgres_version: "15"
              redis_port: 6379
              docker_compose_version: "2.21.0"
              use_ssl: true
              ssl_provider: letsencrypt
          EOF

      - name: Deploy to production
        run: |
          cd infrastructure/ansible
          ANSIBLE_ROLES_PATH=./roles ansible-playbook -i /tmp/ansible/hosts.yml playbooks/update.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Verify deployment
        run: |
          sleep 30
          curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/health || exit 1

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "🚀 Application is live at: https://${{ secrets.PRODUCTION_DOMAIN }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          echo "Please check the logs and rollback if necessary."
